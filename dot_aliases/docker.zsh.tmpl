# ------------------------------------------
# .aliases/docker
# ------------------------------------------

# --- env ---

# determine docker root (shared or default)
if [[ -d "/opt/docker/" ]]; then
  DOCKER_ROOT="/opt/docker"
else
  DOCKER_ROOT="$HOME/docker"
fi 

# lock / unlock permissions
alias dp600='sudo chown -R root:root $DOCKER_ROOT/secrets ; sudo chmod -R 600 $DOCKER_ROOT/secrets ; sudo chown -R root:root $DOCKER_ROOT/.env ; sudo chmod -R 600 $DOCKER_ROOT/.env; sudo find $DOCKER_ROOT/compose/*/ -type f -name ".env" -exec chmod 600 {} \;' # re-lock permissions
alias dp777='sudo chown -R $USER:$USER $DOCKER_ROOT/secrets ; sudo chmod -R 777 $DOCKER_ROOT/secrets ; sudo chown -R $USER:$USER $DOCKER_ROOT/.env ; sudo chmod -R 777 $DOCKER_ROOT/.env ; sudo find $DOCKER_ROOT/compose/*/ -type f -name ".env" -exec chmod 777 {} \;' # open permissions for editing

# --- functions ---

# run merged stacks
function docker_compose_stack() {
    local cmd="$1"
    local stack="$2"
    eval "sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' $cmd"
}

# run all stacks
function docker_compose_all() {
    local cmd="$1"
    for file in "$DOCKER_ROOT"/compose.*.yml; do
        eval "sudo docker compose -f '$file' $cmd"
    done
}

# list available stacks
docker_compose_stacks() {
    echo "Available compose files:"
    if [[ -f "$DOCKER_ROOT/compose.yml" ]]; then
        echo "- compose.yml (core)"
    fi
    find "$DOCKER_ROOT" -name "compose.*.yml" -exec basename {} \; | sed 's/compose\.\(.*\)\.yml/- \1/'
}


# --- containers ---

# start
alias dstart='sudo docker start' # usage: dstart container_name
alias dstopall='sudo docker start $(sudo docker ps -aq)' # dstart all containers

# stop
alias dstop='sudo docker stop' # usage: dstop container_name
alias dstopall='sudo docker stop $(sudo docker ps -aq)' # stop all containers

# restart
alias drestart='sudo docker restart' # usage: dstart container_name
alias drestartall='sudo docker restart $(sudo docker ps -aq)' # dstart all containers

# rm
alias drm='sudo docker rm' # usage: drm container_name
alias drmall='sudo docker rm $(sudo docker ps -aq)' # remove all containers

# shell
alias dexec='sudo docker exec -ti' # usage: dexec container_name


# --- compose / stacks ---

# list stacks
alias dcls='docker_compose_stacks'

# define docker root folder compose file
alias dc='sudo docker compose -f "$DOCKER_ROOT/compose.yml"'

# define default commands
alias dcup='dc up -d --build'
alias dcdown='dc down'
alias dcstart='dc start'
alias dcstop='dc stop'
alias dcrec='dc up -d --force-recreate'
alias dcrestart='dc restart'
alias dcpull='dc pull'

# generate stack-specific commands
for stack in arr media monitoring plex services; do
    
    if [[ -f "$DOCKER_ROOT/compose.$stack.yml" ]]; then
        alias "dcup.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' up -d --build"
        alias "dcdown.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' down"
        alias "dcstart.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' start"
        alias "dcstop.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' stop"
        alias "dcrec.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' up -d --force-recreate"
        alias "dcrestart.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' restart"
        alias "dcpull.$stack"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' pull"
    fi
done

# all stacks commands
alias "dcup.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" up -d --build; done; sudo docker compose -f "$DOCKER_ROOT/compose.yml" up -d '
alias "dcdown.all"='sudo docker compose -f "$DOCKER_ROOT/compose.yml" down'
alias "dcstart.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" start; done'
alias "dcstop.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" stop; done'
alias "dcrec.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" up -d --force-recreate; done; sudo docker compose -f "$DOCKER_ROOT/compose.yml" up -d'
alias "dcrestart.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" restart; done'
alias "dcpull.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" pull; done'


# --- system ---

# ps
alias dps='sudo docker ps -a' # running docker processes
alias dpss='sudo docker ps -a --format "table {{ `{{` }}.Names{{ `}}` }}\t{{ `{{` }}.State{{ `}}` }}\t{{ `{{` }}.Status{{ `}}` }}\t{{ `{{` }}.Image{{ `}}` }}" | (sed -u 1q; sort)' # list all processes in a table (go syntax) 

# df
alias ddf='sudo docker system df' # docker data usage (/var/lib/docker)

# system prune
alias ddelimages='sudo docker rmi $(sudo docker images -q)' # delete unused images
alias dprunesys='sudo docker system prune -a' # remove unsed docker data


# --- images ---

alias dimg='sudo docker image ls' # list images
alias dpruneimg='sudo docker image prune' # remove unused images


# --- volumes ---

alias dvol='sudo docker volume ls' # list volumes
alias dprunevol='sudo docker volume prune' # remove unused volumes


# --- logs ---

alias dlogs='sudo docker logs -tf --tail="50" ' # usage: dlogs container_name
alias dlogsize='sudo du -ch $(sudo docker inspect --format={{ `{{` }}.LogPath{{ `}}` }} $(sudo docker ps -qa)) | sort -h' # see the size of docker containers (go syntax) 


# --- network ---

alias dnet='sudo docker network ls' # list networks 
alias dips="sudo docker ps -q | xargs -n 1 sudo docker inspect -f '{{ `{{` }}.Name{{ `}}` }}%tab%{{ `{{` }}range .NetworkSettings.Networks{{ `}}` }}{{ `{{` }}.IPAddress{{ `}}` }}%tab%{{ `{{` }}end{{ `}}` }}' | sed 's#%tab%#\t#g' | sed 's#/##g' | sort | column -t -N NAME,IP\(s\) -o \$'\t'" # list all containers with their IP addresses

