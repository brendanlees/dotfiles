# ------------------------------------------
# .aliases/docker (docker.zsh.tmpl)
# ------------------------------------------


# --- env ---

# determine docker root folder (shared or default)
if [[ -d "/opt/docker/" ]]; then
  DOCKER_ROOT="/opt/docker"
else
  DOCKER_ROOT="$HOME/docker"
fi 

# lock / unlock permissions
alias dp600='sudo chown -R root:root $DOCKER_ROOT/secrets ; sudo chmod -R 600 $DOCKER_ROOT/secrets ; sudo chown -R root:root $DOCKER_ROOT/.env ; sudo chmod -R 600 $DOCKER_ROOT/.env; sudo find $DOCKER_ROOT/compose/*/ -type f -name ".env" -exec chmod 600 {} \;' # re-lock permissions
alias dp777='sudo chown -R $USER:$USER $DOCKER_ROOT/secrets ; sudo chmod -R 777 $DOCKER_ROOT/secrets ; sudo chown -R $USER:$USER $DOCKER_ROOT/.env ; sudo chmod -R 777 $DOCKER_ROOT/.env ; sudo find $DOCKER_ROOT/compose/*/ -type f -name ".env" -exec chmod 777 {} \;' # open permissions for editing


# --- functions ---

# run compose commands from current working directory first, then from docker folder root anywhere else
get_compose_dir() {
    local cwd="$PWD"
    local docker_root="${DOCKER_ROOT:-$HOME/docker}"
    if ls "$cwd"/compose.yml >/dev/null 2>&1 || ls "$cwd"/compose.*.yml >/dev/null 2>&1; then
        echo "$cwd"
    else
        echo "$docker_root"
    fi
}


# --- containers ---

alias dstart='sudo docker start' # usage: dstart container_name
alias dstopall='sudo docker start $(sudo docker ps -aq)' # start all containers
alias dstop='sudo docker stop' # usage: dstop container_name
alias dstopall='sudo docker stop $(sudo docker ps -aq)' # stop all containers
alias drestart='sudo docker restart' # usage: drestart container_name
alias drestartall='sudo docker restart $(sudo docker ps -aq)' # restart all containers
alias drm='sudo docker rm' # usage: drm container_name
alias drmall='sudo docker rm $(sudo docker ps -aq)' # remove all containers
alias dexec='sudo docker exec -ti' # usage: dexec container_name


# --- compose / stacks ---

alias dc='sudo docker compose -f "$(get_compose_dir)/compose.yml"'
alias dcup='dc up -d --build'
alias dcdown='dc down'
alias dcstart='dc start'
alias dcstop='dc stop'
alias dcrec='dc up -d --force-recreate'
alias dcrestart='dc restart'
alias dcpull='dc pull'

# dynamic stack-specific compose aliases

setopt +o nomatch 2>/dev/null
compose_dir="$(get_compose_dir)"
for file in "$compose_dir"/compose.*.yml; do
    [[ -e "$file" ]] || continue
    stack=$(basename "$file" | sed -E 's/compose\.(.*)\.yml/\1/')
    env_args=""

    default_env="$compose_dir/.env"
    stack_env="$compose_dir/.env-$stack"

    if [[ -f "$default_env" ]]; then
        env_args+=" --env-file $default_env"
    fi
    if [[ -f "$stack_env" ]]; then
        env_args+=" --env-file $stack_env"
    fi

    cmd_prefix="sudo docker compose$env_args -f $file"

    alias "dcup.$stack"="$cmd_prefix up -d --build"
    alias "dcdown.$stack"="$cmd_prefix down"
    alias "dcstart.$stack"="$cmd_prefix start"
    alias "dcstop.$stack"="$cmd_prefix stop"
    alias "dcrec.$stack"="$cmd_prefix up -d --force-recreate"
    alias "dcrestart.$stack"="$cmd_prefix restart"
    alias "dcpull.$stack"="$cmd_prefix pull"
done


# --- system ---
alias dps='sudo docker ps -a'
alias dpsa='sudo docker ps -a --format "table {{ `{{` }}.Names{{ `}}` }}\t{{ `{{` }}.State{{ `}}` }}\t{{ `{{` }}.Status{{ `}}` }}\t{{ `{{` }}.Image{{ `}}` }}" | (sed -u 1q; sort)'
alias ddf='sudo docker system df'
alias ddelimages='sudo docker rmi $(sudo docker images -q)'
alias dprunesys='sudo docker system prune -a'

# --- images ---
alias dimg='sudo docker image ls'
alias dpruneimg='sudo docker image prune'

# --- volumes ---
alias dvol='sudo docker volume ls'
alias dprunevol='sudo docker volume prune'

# --- logs ---
alias dlogs='sudo docker logs -tf --tail="50" '
alias dlogsize='sudo du -ch $(sudo docker inspect --format={{ `{{` }}.LogPath{{ `}}` }} $(sudo docker ps -qa)) | sort -h'

# --- network ---
alias dnet='sudo docker network ls'
alias dips="sudo docker ps -q | xargs -n 1 sudo docker inspect -f '{{ `{{` }}.Name{{ `}}` }}%tab%{{ `{{` }}range .NetworkSettings.Networks{{ `}}` }}{{ `{{` }}.IPAddress{{ `}}` }}%tab%{{ `{{` }}end{{ `}}` }}' | sed 's#%tab%#\t#g' | sed 's#/##g' | sort | column -t -N NAME,IP\(s\) -o \$'\t'"
