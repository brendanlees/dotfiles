# ------------------------------------------
# .aliases/docker
# ------------------------------------------



# --- env vars ---

DOCKER_ROOT="$HOME/docker"

# source machine specific env vars (if they exist)
# if [[ -f "$DOCKER_ROOT/shared/config/zsh_aliases.env" ]]; then
#   source $DOCKER_ROOT/shared/config/zsh_aliases.env 
# fi 

# --- functions ---

# run merge stacks
function docker_compose_stack() {
    local cmd="$1"
    local stack="$2"
    eval "sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' $cmd"
}

# run all stacks
function docker_compose_all() {
    local cmd="$1"
    for file in "$DOCKER_ROOT"/compose.*.yml; do
        eval "sudo docker compose -f '$file' $cmd"
    done
}

# list available stacks
docker_compose_stacks() {
    echo "Available compose files:"
    if [[ -f "$DOCKER_ROOT/compose.yml" ]]; then
        echo "- compose.yml (core)"
    fi
    find "$DOCKER_ROOT" -name "compose.*.yml" -exec basename {} \; | sed 's/compose\.\(.*\)\.yml/- \1/'
}


# --- containers ---

# start
alias dstart='sudo docker start' # usage: dstart container_name
alias dstopall='sudo docker start $(sudo docker ps -aq)' # dstart all containers

# stop
alias dstop='sudo docker stop' # usage: dstop container_name
alias dstopall='sudo docker stop $(sudo docker ps -aq)' # stop all containers

# restart
alias drestart='sudo docker restart' # usage: dstart container_name
alias drestartall='sudo docker restart $(sudo docker ps -aq)' # dstart all containers

# rm
alias drm='sudo docker rm' # usage: drm container_name
alias drmall='sudo docker rm $(sudo docker ps -aq)' # remove all containers

# shell
alias dexec='sudo docker exec -ti' # usage: dexec container_name


# --- compose / stacks ---

# list stacks
alias dcls='docker_compose_stacks'

# define docker root folder compose file
alias dc="sudo docker compose -f $DOCKER_ROOT/compose.yml"

# define commands and stacks
typeset -A commands
commands=(
    ["up"]="up -d --build --remove-orphans"
    ["down"]="down --remove-orphans"
    ["start"]="start"
    ["stop"]="stop"
    ["rec"]="up -d --force-recreate --remove-orphans"
    ["restart"]="restart"
    ["pull"]="pull"
)

stacks=(arr media monitoring services)

# generate regular commands for default compose.yml
for cmd name cmd_args in ${(kv)commands}; do
    alias "dc${cmd}"="dc ${cmd_args}"
done

# generate stack-specific commands
for stack in $stacks; do
    for cmd name cmd_args in ${(kv)commands}; do
        alias "dc${cmd}.${stack}"="sudo docker compose -f '$DOCKER_ROOT/compose.$stack.yml' ${cmd_args}"
    done
done

# generate all-stack commands
for cmd name cmd_args in ${(kv)commands}; do
    alias "dc${cmd}.all"='for file in "$DOCKER_ROOT"/compose.*.yml; do sudo docker compose -f "$file" '"${cmd_args}"'; done'
done


# --- system ---

# ps
alias dps='sudo docker ps -a' # running docker processes
alias dpss='sudo docker ps -a --format "table {{ `{{` }}.Names{{ `}}` }}\t{{ `{{` }}.State{{ `}}` }}\t{{ `{{` }}.Status{{ `}}` }}\t{{ `{{` }}.Image{{ `}}` }}" | (sed -u 1q; sort)' # list all processes in a table (go syntax) 


# df
alias ddf='sudo docker system df' # docker data usage (/var/lib/docker)

# system prune
alias ddelimages='sudo docker rmi $(sudo docker images -q)' # delete unused images
alias dprunesys='sudo docker system prune -a' # remove unsed docker data


# --- images ---

alias dimg='sudo docker image ls' # list images
alias dpruneimg='sudo docker image prune' # remove unused images


# --- volumes ---

alias dvol='sudo docker volume ls' # list volumes
alias dprunevol='sudo docker volume prune' # remove unused volumes


# --- logs ---

alias dlogs='sudo docker logs -tf --tail="50" ' # usage: dlogs container_name
alias dlogsize='sudo du -ch $(sudo docker inspect --format={{ `{{` }}.LogPath{{ `}}` }} $(sudo docker ps -qa)) | sort -h' # see the size of docker containers (go syntax) 


# --- network ---

alias dnet='sudo docker network ls' # list networks 
alias dips="sudo docker ps -q | xargs -n 1 sudo docker inspect -f '{{ `{{` }}.Name{{ `}}` }}%tab%{{ `{{` }}range .NetworkSettings.Networks{{ `}}` }}{{ `{{` }}.IPAddress{{ `}}` }}%tab%{{ `{{` }}end{{ `}}` }}' | sed 's#%tab%#\t#g' | sed 's#/##g' | sort | column -t -N NAME,IP\(s\) -o \$'\t'" # list all containers with their IP addresses

